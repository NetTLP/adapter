--- pcie0/PIO.v	2018-06-18 17:06:09.530191449 +0900
+++ pcie1/PIO.v	2018-06-18 16:35:02.981941174 +0900
@@ -70,11 +70,17 @@ module PIO #(
   parameter KEEP_WIDTH = C_DATA_WIDTH / 8,              // TSTRB width
   parameter TCQ        = 1
 )(
+  input                         sys_rst,
+  input                         pcie_rst,
+
   input                         user_clk,
   input                         user_reset,
   input                         user_lnk_up,
 
   // AXIS
+  output  wire                  s_axis_tx_req,
+  input   wire                  s_axis_tx_ack,
+
   input                         s_axis_tx_tready,
   output  [C_DATA_WIDTH-1:0]    s_axis_tx_tdata,
   output  [KEEP_WIDTH-1:0]      s_axis_tx_tkeep,
@@ -95,7 +101,6 @@ module PIO #(
   output                        cfg_turnoff_ok,
 
   input [15:0]                  cfg_completer_id
-
 ); // synthesis syn_hier = "hard"
 
 
@@ -121,9 +126,14 @@ module PIO #(
     .KEEP_WIDTH( KEEP_WIDTH ),
     .TCQ( TCQ )
   ) PIO_EP_inst (
+    .sys_rst( sys_rst ),
 
     .clk( user_clk ),                             // I
     .rst_n( pio_reset_n ),                        // I
+    .pcie_rst(pcie_rst),
+
+    .s_axis_tx_req(s_axis_tx_req),
+    .s_axis_tx_ack(s_axis_tx_ack),
 
     .s_axis_tx_tready( s_axis_tx_tready ),        // I
     .s_axis_tx_tdata( s_axis_tx_tdata ),          // O

--- pcie0/PIO_EP.v	2018-06-18 17:06:14.458235291 +0900
+++ pcie1/PIO_EP.v	2018-06-18 17:36:53.561760337 +0900
@@ -66,11 +66,16 @@ module PIO_EP #(
   parameter KEEP_WIDTH = C_DATA_WIDTH / 8,              // TSTRB width
   parameter TCQ        = 1
 ) (
+  input                         sys_rst,
 
   input                         clk,
   input                         rst_n,
+  input                         pcie_rst,
 
   // AXIS TX
+  output wire                   s_axis_tx_req,
+  input  wire                   s_axis_tx_ack,
+
   input                         s_axis_tx_tready,
   output  [C_DATA_WIDTH-1:0]    s_axis_tx_tdata,
   output  [KEEP_WIDTH-1:0]      s_axis_tx_tkeep,
@@ -94,11 +99,11 @@ module PIO_EP #(
 
     // Local wires
 
-    wire  [10:0]      rd_addr;
+    wire  [13:0]      rd_addr;
     wire  [3:0]       rd_be;
     wire  [31:0]      rd_data;
 
-    wire  [10:0]      wr_addr;
+    wire  [13:0]      wr_addr;
     wire  [7:0]       wr_be;
     wire  [31:0]      wr_data;
     wire              wr_en;
@@ -116,34 +121,33 @@ module PIO_EP #(
     wire  [15:0]      req_rid;
     wire  [7:0]       req_tag;
     wire  [7:0]       req_be;
-    wire  [12:0]      req_addr;
+    wire  [15:0]      req_addr;
 
 
     //
     // ENDPOINT MEMORY : 8KB memory aperture implemented in FPGA BlockRAM(*)
     //
-
-    PIO_EP_MEM_ACCESS  #(
+    mem_access  #(
        .TCQ( TCQ )
-       ) EP_MEM_inst (
+       ) mem_access_inst (
+//      .sys_rst(sys_rst),       // I
       
-      .clk(clk),               // I
-      .rst_n(rst_n),           // I
+      .pcie_clk(clk),               // I
+      .pcie_rst(pcie_rst),       // I
       
       // Read Port
       
-      .rd_addr(rd_addr),     // I [10:0]
+      .rd_addr(rd_addr),     // I [13:0]
       .rd_be(rd_be),         // I [3:0]
       .rd_data(rd_data),     // O [31:0]
       
       // Write Port
       
-      .wr_addr(wr_addr),     // I [10:0]
+      .wr_addr(wr_addr),     // I [13:0]
       .wr_be(wr_be),         // I [7:0]
       .wr_data(wr_data),     // I [31:0]
       .wr_en(wr_en),         // I
       .wr_busy(wr_busy)      // O
-      
       );
 
     //
@@ -181,15 +185,14 @@ module PIO_EP #(
     .req_rid(req_rid),                      // O [15:0]
     .req_tag(req_tag),                      // O [7:0]
     .req_be(req_be),                        // O [7:0]
-    .req_addr(req_addr),                    // O [12:0]
+    .req_addr(req_addr),                    // O [15:0]
                                             
     // Memory Write Port                    
-    .wr_addr(wr_addr),                      // O [10:0]
+    .wr_addr(wr_addr),                      // O [13:0]
     .wr_be(wr_be),                          // O [7:0]
     .wr_data(wr_data),                      // O [31:0]
     .wr_en(wr_en),                          // O
     .wr_busy(wr_busy)                       // I
-                                            
   );
 
     //
@@ -205,6 +208,9 @@ module PIO_EP #(
     .clk(clk),                                  // I
     .rst_n(rst_n),                              // I
 
+    .s_axis_tx_req(s_axis_tx_req),
+    .s_axis_tx_ack(s_axis_tx_ack),
+
     // AXIS Tx
     .s_axis_tx_tready( s_axis_tx_tready ),      // I
     .s_axis_tx_tdata( s_axis_tx_tdata ),        // O
@@ -226,11 +232,11 @@ module PIO_EP #(
     .req_rid(req_rid),                        // I [15:0]
     .req_tag(req_tag),                        // I [7:0]
     .req_be(req_be),                          // I [7:0]
-    .req_addr(req_addr),                      // I [12:0]
+    .req_addr(req_addr),                      // I [15:0]
 
     // Read Port
 
-    .rd_addr(rd_addr),                        // O [10:0]
+    .rd_addr(rd_addr),                        // O [13:0]
     .rd_be(rd_be),                            // O [3:0]
     .rd_data(rd_data),                        // I [31:0]
 
@@ -242,4 +248,3 @@ module PIO_EP #(
   assign compl_done = compl_done_int;
 
 endmodule // PIO_EP
-

--- pcie0/PIO_RX_ENGINE.v	2018-06-18 17:06:29.818371045 +0900
+++ pcie1/PIO_RX_ENGINE.v	2018-06-18 17:24:31.498070667 +0900
@@ -96,7 +96,7 @@ module PIO_RX_ENGINE  #(
   output reg [15:0]  req_rid,                       // Memory Read Requestor ID
   output reg [7:0]   req_tag,                       // Memory Read Tag
   output reg [7:0]   req_be,                        // Memory Read Byte Enables
-  output reg [12:0]  req_addr,                      // Memory Read Address
+  output reg [15:0]  req_addr,                      // Memory Read Address
 
 
   // Memory interface used to save 1 DW data received
@@ -107,7 +107,7 @@ module PIO_RX_ENGINE  #(
   // processing written information.
 
 
-  output reg [10:0]  wr_addr,                       // Memory Write Address
+  output reg [13:0]  wr_addr,                       // Memory Write Address
   output reg [7:0]   wr_be,                         // Memory Write Byte Enable
   output reg [31:0]  wr_data,                       // Memory Write Data
   output reg         wr_en,                         // Memory Write Enable
@@ -183,10 +183,10 @@ module PIO_RX_ENGINE  #(
           req_rid      <= #TCQ 16'b0;
           req_tag      <= #TCQ 8'b0;
           req_be       <= #TCQ 8'b0;
-          req_addr     <= #TCQ 13'b0;
+          req_addr     <= #TCQ 16'b0;
 
           wr_be        <= #TCQ 8'b0;
-          wr_addr      <= #TCQ 11'b0;
+          wr_addr      <= #TCQ 14'b0;
           wr_data      <= #TCQ 32'b0;
           wr_en        <= #TCQ 1'b0;
 
@@ -220,7 +220,8 @@ module PIO_RX_ENGINE  #(
                     m_axis_rx_tready <= #TCQ 1'b0;
 
 
-                    if (m_axis_rx_tdata[9:0] == 10'b1)
+//                    if (m_axis_rx_tdata[9:0] == 10'b1)
+                    if (m_axis_rx_tdata[9:0] != 10'b0)
                     begin
 
                       req_tc     <= #TCQ m_axis_rx_tdata[22:20];
@@ -271,7 +272,8 @@ module PIO_RX_ENGINE  #(
                     req_len      <= #TCQ m_axis_rx_tdata[9:0];
                     m_axis_rx_tready <= #TCQ 1'b0;
 
-                    if (m_axis_rx_tdata[9:0] == 10'b1)
+//                    if (m_axis_rx_tdata[9:0] == 10'b1)
+                    if (m_axis_rx_tdata[9:0] != 10'b0)
                     begin
 
                       req_tc     <= #TCQ m_axis_rx_tdata[22:20];
@@ -396,7 +398,7 @@ module PIO_RX_ENGINE  #(
               begin
 
                 m_axis_rx_tready <= #TCQ 1'b0;
-                req_addr     <= #TCQ {region_select[1:0],m_axis_rx_tdata[10:2], 2'b00};
+                req_addr     <= #TCQ {region_select[1:0],m_axis_rx_tdata[13:2], 2'b00};
                 req_compl    <= #TCQ 1'b1;
                 req_compl_wd <= #TCQ 1'b1;
                 state        <= #TCQ PIO_RX_WAIT_STATE;
@@ -416,7 +418,7 @@ module PIO_RX_ENGINE  #(
                 wr_data      <= #TCQ m_axis_rx_tdata[63:32];
                 wr_en        <= #TCQ 1'b1;
                 m_axis_rx_tready <= #TCQ 1'b0;
-                wr_addr      <= #TCQ {region_select[1:0],m_axis_rx_tdata[10:2]};
+                wr_addr      <= #TCQ {region_select[1:0],m_axis_rx_tdata[13:2]};
                 state        <= #TCQ  PIO_RX_WAIT_STATE;
 
               end // if (m_axis_rx_tvalid)
@@ -431,7 +433,7 @@ module PIO_RX_ENGINE  #(
               if (m_axis_rx_tvalid)
               begin
 
-                req_addr     <= #TCQ {region_select[1:0],m_axis_rx_tdata[42:34], 2'b00};
+                req_addr     <= #TCQ {region_select[1:0],m_axis_rx_tdata[45:34], 2'b00};
                 req_compl    <= #TCQ 1'b1;
                 req_compl_wd <= #TCQ 1'b1;
                 m_axis_rx_tready <= #TCQ 1'b0;
@@ -450,7 +452,7 @@ module PIO_RX_ENGINE  #(
               begin
 
                 m_axis_rx_tready <= #TCQ 1'b0;
-                wr_addr        <= #TCQ {region_select[1:0],m_axis_rx_tdata[42:34]};
+                wr_addr        <= #TCQ {region_select[1:0],m_axis_rx_tdata[45:34]};
                 state          <= #TCQ  PIO_RX_MEM_WR64_DW3;
 
               end // if (m_axis_rx_tvalid)
@@ -485,7 +487,7 @@ module PIO_RX_ENGINE  #(
                 wr_data         <= #TCQ m_axis_rx_tdata[63:32];
                 wr_en           <= #TCQ 1'b1;
                 m_axis_rx_tready  <= #TCQ 1'b0;
-                wr_addr         <= #TCQ {region_select[1:0],m_axis_rx_tdata[10:2]};
+                wr_addr         <= #TCQ {region_select[1:0],m_axis_rx_tdata[13:2]};
                 req_compl       <= #TCQ 1'b1;
                 req_compl_wd    <= #TCQ 1'b0;
                 state             <= #TCQ  PIO_RX_WAIT_STATE;
@@ -584,9 +586,9 @@ module PIO_RX_ENGINE  #(
           req_rid      <= #TCQ 16'b0;
           req_tag      <= #TCQ 8'b0;
           req_be       <= #TCQ 8'b0;
-          req_addr     <= #TCQ 13'b0;
+          req_addr     <= #TCQ 16'b0;
           wr_be        <= #TCQ 8'b0;
-          wr_addr      <= #TCQ 11'b0;
+          wr_addr      <= #TCQ 14'b0;
           wr_data      <= #TCQ 32'b0;
           wr_en        <= #TCQ 1'b0;
 
@@ -620,7 +622,8 @@ module PIO_RX_ENGINE  #(
                   case (m_axis_rx_tdata[94:88])
 
                     PIO_RX_MEM_RD32_FMT_TYPE : begin
-                      if (m_axis_rx_tdata[73:64] == 10'b1)
+//                      if (m_axis_rx_tdata[73:64] == 10'b1)
+                      if (m_axis_rx_tdata[73:64] != 10'b0)
                       begin
                         req_tc       <= #TCQ m_axis_rx_tdata[86:84];
                         req_td       <= #TCQ m_axis_rx_tdata[79];
@@ -651,7 +654,8 @@ module PIO_RX_ENGINE  #(
                     end // PIO_RX_MEM_WR32_FMT_TYPE
 
                     PIO_RX_MEM_RD64_FMT_TYPE : begin
-                      if (m_axis_rx_tdata[73:64] == 10'b1)
+//                      if (m_axis_rx_tdata[73:64] == 10'b1)
+                      if (m_axis_rx_tdata[73:64] != 10'b0)
                       begin
                         req_tc       <= #TCQ m_axis_rx_tdata[86:84];
                         req_td       <= #TCQ m_axis_rx_tdata[79];
@@ -750,8 +754,7 @@ module PIO_RX_ENGINE  #(
                         req_be       <= #TCQ m_axis_rx_tdata[39:32];
 
                         //lower qw
-                        req_addr     <= #TCQ {region_select[1:0],
-                                                 m_axis_rx_tdata[74:66],2'b00};
+                        req_addr     <= #TCQ {region_select[1:0], m_axis_rx_tdata[77:66],2'b00};
                         req_compl    <= #TCQ 1'b1;
                         req_compl_wd <= #TCQ 1'b1;
                         state        <= #TCQ PIO_RX_WAIT_STATE;
@@ -770,7 +773,7 @@ module PIO_RX_ENGINE  #(
                         //lower qw
                         wr_data      <= #TCQ m_axis_rx_tdata[127:96];
                         wr_en        <= #TCQ 1'b1;
-                        wr_addr      <= #TCQ {region_select[1:0], m_axis_rx_tdata[74:66]};
+                        wr_addr      <= #TCQ {region_select[1:0], m_axis_rx_tdata[77:66]};
                         wr_en        <= #TCQ 1'b1;
                         state        <= #TCQ PIO_RX_WAIT_STATE;
                       end // if (m_axis_rx_tdata[9:0] == 10'b1)
@@ -797,7 +800,7 @@ module PIO_RX_ENGINE  #(
                         // Upper 32-bits of 64-bit address not used, but would be captured
                         // in this state if used.  Upper 32 address bits are on
                         //m_axis_rx_tdata[127:96]
-                        req_addr     <= #TCQ {region_select[1:0], m_axis_rx_tdata[74:66],2'b00};
+                        req_addr     <= #TCQ {region_select[1:0], m_axis_rx_tdata[77:66],2'b00};
                         req_compl    <= #TCQ 1'b1;
                         req_compl_wd <= #TCQ 1'b1;
                         state        <= #TCQ PIO_RX_WAIT_STATE;
@@ -814,7 +817,7 @@ module PIO_RX_ENGINE  #(
                         wr_be        <= #TCQ m_axis_rx_tdata[39:32];
 
                         // lower qw
-                        wr_addr      <= #TCQ {region_select[1:0], m_axis_rx_tdata[74:66]};
+                        wr_addr      <= #TCQ {region_select[1:0], m_axis_rx_tdata[77:66]};
                         state        <= #TCQ PIO_RX_MEM_WR64_DW3;
                       end // if (m_axis_rx_tdata[9:0] == 10'b1)
                       else
@@ -837,7 +840,7 @@ module PIO_RX_ENGINE  #(
                         req_be       <= #TCQ m_axis_rx_tdata[39:32];
 
                         //lower qw
-                        req_addr     <= #TCQ {region_select[1:0], m_axis_rx_tdata[74:66],2'b00};
+                        req_addr     <= #TCQ {region_select[1:0], m_axis_rx_tdata[77:66],2'b00};
                         req_compl    <= #TCQ 1'b1;
                         req_compl_wd <= #TCQ 1'b1;
                         state        <= #TCQ PIO_RX_WAIT_STATE;
@@ -865,7 +868,7 @@ module PIO_RX_ENGINE  #(
 
                         wr_data      <= #TCQ m_axis_rx_tdata[127:96];
                         wr_en        <= #TCQ 1'b1;
-                        wr_addr      <= #TCQ {region_select[1:0], m_axis_rx_tdata[74:66]};
+                        wr_addr      <= #TCQ {region_select[1:0], m_axis_rx_tdata[77:66]};
                         wr_en        <= #TCQ 1'b1;
                         req_compl    <= #TCQ 1'b1;
                         req_compl_wd <= #TCQ 1'b0;
@@ -902,7 +905,7 @@ module PIO_RX_ENGINE  #(
               if (m_axis_rx_tvalid)
               begin
                 m_axis_rx_tready  <= #TCQ 1'b0;
-                req_addr          <= #TCQ {region_select[1:0], m_axis_rx_tdata[10:2], 2'b00};
+                req_addr          <= #TCQ {region_select[1:0], m_axis_rx_tdata[13:2], 2'b00};
                 req_compl         <= #TCQ 1'b1;
                 req_compl_wd      <= #TCQ 1'b1;
                 state             <= #TCQ PIO_RX_WAIT_STATE;
@@ -920,7 +923,7 @@ module PIO_RX_ENGINE  #(
                 wr_data           <= #TCQ m_axis_rx_tdata[63:32];
                 wr_en             <= #TCQ 1'b1;
                 m_axis_rx_tready  <= #TCQ 1'b0;
-                wr_addr           <= #TCQ {region_select[1:0], m_axis_rx_tdata[10:2]};
+                wr_addr           <= #TCQ {region_select[1:0], m_axis_rx_tdata[13:2]};
                 state             <= #TCQ  PIO_RX_WAIT_STATE;
               end // if (m_axis_rx_tvalid)
               else
@@ -936,7 +939,7 @@ module PIO_RX_ENGINE  #(
                 wr_data           <= #TCQ m_axis_rx_tdata[63:32];
                 wr_en             <= #TCQ 1'b1;
                 m_axis_rx_tready  <= #TCQ 1'b0;
-                wr_addr           <= #TCQ {region_select[1:0], m_axis_rx_tdata[10:2]};
+                wr_addr           <= #TCQ {region_select[1:0], m_axis_rx_tdata[13:2]};
                 req_compl         <= #TCQ 1'b1;
                 req_compl_wd      <= #TCQ 1'b0;
                 state             <= #TCQ  PIO_RX_WAIT_STATE;
@@ -951,7 +954,7 @@ module PIO_RX_ENGINE  #(
             PIO_RX_MEM_RD64_DW1DW2 : begin
               if (m_axis_rx_tvalid)
               begin
-                req_addr         <= #TCQ {region_select[1:0], m_axis_rx_tdata[10:2], 2'b00};
+                req_addr         <= #TCQ {region_select[1:0], m_axis_rx_tdata[13:2], 2'b00};
                 req_compl        <= #TCQ 1'b1;
                 req_compl_wd     <= #TCQ 1'b1;
                 m_axis_rx_tready <= #TCQ 1'b0;
@@ -968,7 +971,7 @@ module PIO_RX_ENGINE  #(
               if (m_axis_rx_tvalid)
               begin
                 m_axis_rx_tready  <= #TCQ 1'b0;
-                wr_addr           <= #TCQ {region_select[1:0], m_axis_rx_tdata[10:2]};
+                wr_addr           <= #TCQ {region_select[1:0], m_axis_rx_tdata[13:2]};
                 // lower QW
                 wr_data           <= #TCQ m_axis_rx_tdata[95:64];
                 wr_en             <= #TCQ 1'b1;
@@ -1101,4 +1104,3 @@ assign    erom_bar_hit_n  = ~(m_axis_rx_
   // synthesis translate_on
 
 endmodule // PIO_RX_ENGINE
-

--- pcie0/PIO_TX_ENGINE.v	2018-06-18 17:06:41.402472549 +0900
+++ pcie1/PIO_TX_ENGINE.v	2018-06-18 16:35:02.981941174 +0900
@@ -67,6 +67,8 @@ module PIO_TX_ENGINE    #(
   input             rst_n,
 
   // AXIS
+  output  reg                     s_axis_tx_req = 1'b0,
+  input   wire                    s_axis_tx_ack,
   input                           s_axis_tx_tready,
   output  reg [C_DATA_WIDTH-1:0]  s_axis_tx_tdata,
   output  reg [KEEP_WIDTH-1:0]    s_axis_tx_tkeep,
@@ -86,9 +88,9 @@ module PIO_TX_ENGINE    #(
   input [15:0]                    req_rid,
   input [7:0]                     req_tag,
   input [7:0]                     req_be,
-  input [12:0]                    req_addr,
+  input [15:0]                    req_addr,
 
-  output [10:0]                   rd_addr,
+  output [13:0]                   rd_addr,
   output reg [3:0]                rd_be,
   input  [31:0]                   rd_data,
   input [15:0]                    completer_id
@@ -121,7 +123,7 @@ localparam PIO_TX_CPLD_QW1        = 2'b1
 
   // Present address and byte enable to memory module
 
-  assign rd_addr = req_addr[12:2];
+  assign rd_addr = req_addr[15:2];
  
   always @(posedge clk) begin
     if (!rst_n)
@@ -190,6 +192,7 @@ localparam PIO_TX_CPLD_QW1        = 2'b1
           s_axis_tx_tvalid  <= #TCQ 1'b0;
           s_axis_tx_tdata   <= #TCQ {C_DATA_WIDTH{1'b0}};
           s_axis_tx_tkeep   <= #TCQ {KEEP_WIDTH{1'b0}};
+          s_axis_tx_req     <= #TCQ 1'b0;
          
           compl_done        <= #TCQ 1'b0;
           compl_busy_i      <= #TCQ 1'b0;
@@ -207,11 +210,12 @@ localparam PIO_TX_CPLD_QW1        = 2'b1
               if (compl_busy_i) 
               begin
                 
+                s_axis_tx_req     <= #TCQ 1'b1;
                 s_axis_tx_tdata   <= #TCQ {C_DATA_WIDTH{1'b0}};
                 s_axis_tx_tkeep   <= #TCQ 8'hFF;
                 s_axis_tx_tlast   <= #TCQ 1'b0;
                 s_axis_tx_tvalid  <= #TCQ 1'b0;
-                  if (s_axis_tx_tready)
+                  if (s_axis_tx_tready && s_axis_tx_ack)
                     state             <= #TCQ PIO_TX_CPLD_QW1_FIRST;
                   else
                   state             <= #TCQ PIO_TX_RST_STATE;
@@ -219,6 +223,7 @@ localparam PIO_TX_CPLD_QW1        = 2'b1
               else
               begin
 
+                s_axis_tx_req     <= #TCQ 1'b0;
                 s_axis_tx_tlast   <= #TCQ 1'b0;
                 s_axis_tx_tvalid  <= #TCQ 1'b0;
                 s_axis_tx_tdata   <= #TCQ 64'b0;
@@ -339,6 +344,7 @@ localparam PIO_TX_CPLD_QW1        = 2'b1
           s_axis_tx_tvalid  <= #TCQ 1'b0;
           s_axis_tx_tdata   <= #TCQ {C_DATA_WIDTH{1'b0}};
           s_axis_tx_tkeep   <= #TCQ {KEEP_WIDTH{1'b0}};
+          s_axis_tx_req     <= #TCQ 1'b0;
           compl_done        <= #TCQ 1'b0;
           hold_state        <= #TCQ 1'b0;
         end // if !rst_n
@@ -347,7 +353,7 @@ localparam PIO_TX_CPLD_QW1        = 2'b1
   
           if (req_compl_q2 | hold_state)
           begin
-            if (s_axis_tx_tready) 
+            if (s_axis_tx_tready & s_axis_tx_ack) 
             begin
   
               s_axis_tx_tlast   <= #TCQ 1'b1;
@@ -387,10 +393,13 @@ localparam PIO_TX_CPLD_QW1        = 2'b1
   
               compl_done        <= #TCQ 1'b1;
               hold_state        <= #TCQ 1'b0;
+              s_axis_tx_req     <= #TCQ 1'b0;
   
             end // if (s_axis_tx_tready) 
-            else
+            else begin
               hold_state        <= #TCQ 1'b1;
+              s_axis_tx_req     <= #TCQ 1'b1;
+            end
   
           end // if (req_compl_q2 | hold_state)
           else

--- pcie0/mem_access.v	1970-01-01 09:00:00.000000000 +0900
+++ pcie1/mem_access.v	2018-06-18 17:28:12.287440936 +0900
@@ -0,0 +1,137 @@
+module mem_access  #(
+	parameter TCQ = 1
+) (
+
+	input wire pcie_clk,
+	input wire pcie_rst,
+
+	// Read Access
+	input wire   [3:0] rd_be,      // I [3:0]   Read Byte Enable
+	input wire  [13:0] rd_addr,    // I [13:0]  Read Address
+	output wire [31:0] rd_data,         // O [31:0]  Read Data
+
+	// Write Access
+	input wire wr_en,              // I	 Write Enable
+	input wire  [7:0] wr_be,       // I [7:0]   Write Byte Enable
+	input wire [13:0] wr_addr,     // I [10:0]  Write Address
+	input wire [31:0] wr_data,     // I [31:0]  Write Data
+	output wire wr_busy            // O	 Write Controller Busy
+);
+
+assign wr_busy = 1'b0;
+
+
+// bar0
+// address map:
+// 0-4: id
+reg bram_bar0_we0, bram_bar0_we1, bram_bar0_we2, bram_bar0_we3;
+reg [3:0] bram_bar0_addr0, bram_bar0_addr1, bram_bar0_addr2, bram_bar0_addr3;
+reg [7:0] bram_bar0_din0, bram_bar0_din1, bram_bar0_din2, bram_bar0_din3;
+wire [7:0] bram_bar0_dout0, bram_bar0_dout1, bram_bar0_dout2, bram_bar0_dout3;
+mybram #( .WIDTH(8), .DEPTH(4) ) bar0_bram0 ( .clk(pcie_clk), .we(bram_bar0_we0), .addr(bram_bar0_addr0), .din(bram_bar0_din0), .dout(bram_bar0_dout0) );
+mybram #( .WIDTH(8), .DEPTH(4) ) bar0_bram1 ( .clk(pcie_clk), .we(bram_bar0_we1), .addr(bram_bar0_addr1), .din(bram_bar0_din1), .dout(bram_bar0_dout1) );
+mybram #( .WIDTH(8), .DEPTH(4) ) bar0_bram2 ( .clk(pcie_clk), .we(bram_bar0_we2), .addr(bram_bar0_addr2), .din(bram_bar0_din2), .dout(bram_bar0_dout2) );
+mybram #( .WIDTH(8), .DEPTH(4) ) bar0_bram3 ( .clk(pcie_clk), .we(bram_bar0_we3), .addr(bram_bar0_addr3), .din(bram_bar0_din3), .dout(bram_bar0_dout3) );
+
+// bar2
+reg bram_bar2_we0, bram_bar2_we1, bram_bar2_we2, bram_bar2_we3;
+reg [7:0] bram_bar2_addr0, bram_bar2_addr1, bram_bar2_addr2, bram_bar2_addr3;
+reg [7:0] bram_bar2_din0, bram_bar2_din1, bram_bar2_din2, bram_bar2_din3;
+wire [7:0] bram_bar2_dout0, bram_bar2_dout1, bram_bar2_dout2, bram_bar2_dout3;
+mybram #( .WIDTH(8), .DEPTH(8) ) bar2_bram0 ( .clk(pcie_clk), .we(bram_bar2_we0), .addr(bram_bar2_addr0), .din(bram_bar2_din0), .dout(bram_bar2_dout0) );
+mybram #( .WIDTH(8), .DEPTH(8) ) bar2_bram1 ( .clk(pcie_clk), .we(bram_bar2_we1), .addr(bram_bar2_addr1), .din(bram_bar2_din1), .dout(bram_bar2_dout1) );
+mybram #( .WIDTH(8), .DEPTH(8) ) bar2_bram2 ( .clk(pcie_clk), .we(bram_bar2_we2), .addr(bram_bar2_addr2), .din(bram_bar2_din2), .dout(bram_bar2_dout2) );
+mybram #( .WIDTH(8), .DEPTH(8) ) bar2_bram3 ( .clk(pcie_clk), .we(bram_bar2_we3), .addr(bram_bar2_addr3), .din(bram_bar2_din3), .dout(bram_bar2_dout3) );
+
+reg [31:0] read_data;
+always @* begin
+	// memory write controller 
+	bram_bar0_we0 <= 1'b0;
+	bram_bar0_we1 <= 1'b0;
+	bram_bar0_we2 <= 1'b0;
+	bram_bar0_we3 <= 1'b0;
+
+	bram_bar2_we0 <= 1'b0;
+	bram_bar2_we1 <= 1'b0;
+	bram_bar2_we2 <= 1'b0;
+	bram_bar2_we3 <= 1'b0;
+
+	if (wr_en == 1'b1) begin
+
+		bram_bar0_addr0 <= wr_addr[3:0];
+		bram_bar0_addr1 <= wr_addr[3:0];
+		bram_bar0_addr2 <= wr_addr[3:0];
+		bram_bar0_addr3 <= wr_addr[3:0];
+
+		bram_bar2_addr0 <= wr_addr[7:0];
+		bram_bar2_addr1 <= wr_addr[7:0];
+		bram_bar2_addr2 <= wr_addr[7:0];
+		bram_bar2_addr3 <= wr_addr[7:0];
+
+		bram_bar0_din0 <= wr_data[31:24];
+		bram_bar0_din1 <= wr_data[23:16];
+		bram_bar0_din2 <= wr_data[15: 8];
+		bram_bar0_din3 <= wr_data[ 7: 0];
+
+		bram_bar2_din0 <= wr_data[31:24];
+		bram_bar2_din1 <= wr_data[23:16];
+		bram_bar2_din2 <= wr_data[15: 8];
+		bram_bar2_din3 <= wr_data[ 7: 0];
+
+		case (wr_addr[13:12])
+		2'b01: begin    // BAR0
+			case (wr_addr[5:0])
+			6'h00: begin // RONLY
+			end
+			6'h01: begin // RW
+				if (wr_be[0]) bram_bar0_we0 <= 1'b1;
+				if (wr_be[1]) bram_bar0_we1 <= 1'b1;
+				if (wr_be[2]) bram_bar0_we2 <= 1'b1;
+				if (wr_be[3]) bram_bar0_we3 <= 1'b1;
+			end
+			endcase
+		end
+		2'b10: begin    // BAR2
+			if (wr_be[0]) bram_bar2_we0 <= 1'b1;
+			if (wr_be[1]) bram_bar2_we1 <= 1'b1;
+			if (wr_be[2]) bram_bar2_we2 <= 1'b1;
+			if (wr_be[3]) bram_bar2_we3 <= 1'b1;
+		end
+		endcase
+	end else begin
+		// memory read controller 
+		bram_bar0_addr0 <= rd_addr[3:0];
+		bram_bar0_addr1 <= rd_addr[3:0];
+		bram_bar0_addr2 <= rd_addr[3:0];
+		bram_bar0_addr3 <= rd_addr[3:0];
+		
+		bram_bar2_addr0 <= rd_addr[7:0];
+		bram_bar2_addr1 <= rd_addr[7:0];
+		bram_bar2_addr2 <= rd_addr[7:0];
+		bram_bar2_addr3 <= rd_addr[7:0];
+		
+		case (rd_addr[13:12])
+		2'b01: begin    // BAR0
+			case (rd_addr[5:0])
+			6'h00: // RONLY
+				read_data <= 32'h01_23_45_67;
+			6'h01: // RW
+				read_data <= { bram_bar0_dout0, bram_bar0_dout1, bram_bar0_dout2, bram_bar0_dout3 };
+			default:
+				read_data <= 32'h0;
+			endcase
+		end
+		2'b10: begin    // BAR2
+			read_data <= { bram_bar2_dout0, bram_bar2_dout1, bram_bar2_dout2, bram_bar2_dout3 };
+		end
+		default: begin
+			read_data <= 32'b0;
+		end
+		endcase
+	end
+end
+
+assign rd_data = read_data;
+
+endmodule
+

--- pcie0/mybram.v	1970-01-01 09:00:00.000000000 +0900
+++ pcie1/mybram.v	2018-06-18 17:27:57.775351642 +0900
@@ -0,0 +1,22 @@
+module mybram #(
+	parameter WIDTH=8,
+	parameter DEPTH=8
+) (
+	input wire clk,
+	input wire we,
+	input wire [DEPTH-1:0] addr,
+	input wire [WIDTH-1:0] din,
+	output reg [WIDTH-1:0] dout
+);
+
+
+(* ram_style = "block" *) reg [WIDTH-1:0] mem [(1<<DEPTH)-1:0];
+
+always @(posedge clk) begin
+	if (we)
+		mem[addr] <= din;
+	dout <= mem[addr];
+end
+
+endmodule
+

--- pcie0/pcie_app_7x.v	2018-06-18 17:06:55.786597564 +0900
+++ pcie1/pcie_app_7x.v	2018-06-18 17:33:11.528898867 +0900
@@ -69,18 +69,23 @@ module  pcie_app_7x#(
   parameter KEEP_WIDTH = C_DATA_WIDTH / 8,              // TSTRB width
   parameter TCQ        = 1
 )(
+  input                         sys_rst,
+  input wire pcie_rst,
 
   input                         user_clk,
   input                         user_reset,
   input                         user_lnk_up,
 
   // Tx
+  output wire                   s_axis_tx_req,
+  input  wire                   s_axis_tx_ack,
+
   input                         s_axis_tx_tready,
-  output  [C_DATA_WIDTH-1:0]    s_axis_tx_tdata,
+  output                        s_axis_tx_tvalid,
+  output                        s_axis_tx_tlast,
   output  [KEEP_WIDTH-1:0]      s_axis_tx_tkeep,
+  output  [C_DATA_WIDTH-1:0]    s_axis_tx_tdata,
   output  [3:0]                 s_axis_tx_tuser,
-  output                        s_axis_tx_tlast,
-  output                        s_axis_tx_tvalid,
 
   // Rx
   input  [C_DATA_WIDTH-1:0]     m_axis_rx_tdata,
@@ -226,6 +231,9 @@ module  pcie_app_7x#(
     .TCQ( TCQ )
 
   ) PIO (
+    .sys_rst( sys_rst ),
+
+    .pcie_rst( pcie_rst ),
 
     .user_clk ( user_clk ),                         // I
     .user_reset ( user_reset ),                     // I
@@ -235,6 +243,9 @@ module  pcie_app_7x#(
     .cfg_completer_id ( cfg_completer_id ),         // I [15:0]
     .cfg_turnoff_ok ( cfg_turnoff_ok ),             // O
 
+    .s_axis_tx_req(s_axis_tx_req),
+    .s_axis_tx_ack(s_axis_tx_ack),
+
     .s_axis_tx_tready ( s_axis_tx_tready_i ),       // I
     .s_axis_tx_tdata  ( s_axis_tx_tdata ),          // O
     .s_axis_tx_tkeep  ( s_axis_tx_tkeep ),          // O
